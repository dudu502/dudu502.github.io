<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>百炼青铜</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-09T08:06:36.611Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Pan Haijie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>帧同步</title>
    <link href="http://example.com/2021/02/07/%E5%B8%A7%E5%90%8C%E6%AD%A5/"/>
    <id>http://example.com/2021/02/07/%E5%B8%A7%E5%90%8C%E6%AD%A5/</id>
    <published>2021-02-07T02:30:31.000Z</published>
    <updated>2021-02-09T08:06:36.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="帧同步与状态同步"><a href="#帧同步与状态同步" class="headerlink" title="帧同步与状态同步"></a>帧同步与状态同步</h2><ul><li>帧同步和状态同步都是一种能让多个客户端在相对同一时刻表现一致的方法，当然只有外观表现一致还远远不够，或者说还不够精确，这时候还需要在数据层面也要保持一致，用数据的变化来驱动外在表现的变化。这点不管是帧同步或状态同步都是一样的。</li><li>关于数据驱动显示的话题，这里有一个反面事例，我想起了在若干年以前我曾经听一个同事说他一个俄罗斯方块游戏的开发经历，他分享了在开发过程中就方块与方块间图像碰撞检测的心得，并以此彰显开发在这个游戏的不易，以及自己的小聪明。</li><li>帧同步和状态同步没有孰优孰劣，都是很好的同步方案，但同时也都有自己的局限。像星际争霸，魔兽争霸等老牌RTS游戏都采用的帧同步模式。而传奇，奇迹等RPG游戏都采用的状态同步模式，这些大作都是成功的典范。讨论哪一种方式碾压另一种没有意义，具体还是要看需求场景。</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>以下列举的优缺点只是一般情况下：<table><thead><tr><th></th><th>帧同步</th><th>状态同步</th></tr></thead><tbody><tr><td>一致性</td><td><font color="#219167">设计层面决定了必然一致</font></td><td><font color="#219167">可以保证一致性</font></td></tr><tr><td>玩家数</td><td><font color="#bd2158">对多玩家支持有限</font></td><td><font color="#219167">多玩家有优势</font></td></tr><tr><td>跨平台</td><td><font color="#bd2158">需要考虑浮点运算的一致性</font></td><td><font color="#219167">由于主要的计算都在服务器，因此不存在跨平台问题</font></td></tr><tr><td>防作弊</td><td><font color="#bd2158">容易作弊，但是可以优化</font></td><td><font color="#219167">可以很好的防作弊 </font></td></tr><tr><td>断线重连</td><td><font color="#bd2158">实现起来比较难，但不是不能</font></td><td><font color="#219167">只需要重新发送一次信息即可，好实现</font></td></tr><tr><td>回放需求</td><td><font color="#219167">能完美实现</font></td><td><font color="#bd2158">无法实现</font></td></tr><tr><td>暂停游戏</td><td><font color="#219167">好实现</font></td><td><font color="#bd2158">不好实现</font></td></tr><tr><td>网络传输量</td><td><font color="#219167">比较小</font></td><td><font color="#bd2158">比较大</font></td></tr><tr><td>开发难度</td><td><font color="#bd2158">相对复杂</font></td><td><font color="#219167">相对简单</font></td></tr><tr><td>RTS类游戏</td><td><font color="#219167">适合</font></td><td><font color="#bd2158">不适合</font></td></tr><tr><td>格斗类游戏</td><td><font color="#219167">适合</font></td><td><font color="#bd2158">不适合</font></td></tr><tr><td>MOBA类游戏</td><td><font color="#219167">适合</font></td><td><font color="#bd2158">不适合</font></td></tr><tr><td>MMO类游戏</td><td><font color="#bd2158">不适合</font></td><td><font color="#219167">适合</font></td></tr></tbody></table></li></ul><h3 id="帧同步需要克服的难点"><a href="#帧同步需要克服的难点" class="headerlink" title="帧同步需要克服的难点"></a>帧同步需要克服的难点</h3><ul><li>浮点计算一致性，我使用的是TrueSync浮点运算库。可以保证浮点数在不同设备上运算一致。</li><li>逻辑帧的驱动，我需要不同设备在启动后经过一段时间后所有的设备都能保持一致的帧数，这就需要在每次tick的时候通过DateTime校准。</li><li>客户端的逻辑帧只在逻辑帧结束时发送用户的手动命令给逻辑帧服务器，逻辑帧服务器在收到客户端发来的命令后将命令逻辑帧设置为当前服务器的逻辑帧编号，这是为了广播给所有客户端做准备。</li><li>客户端收到服务器发来的逻辑帧命令后，根据客户端自身的逻辑帧编号进行回滚并重新计算整个游戏世界，因此客户端需要对过往的N帧历史数据进行快照保存。</li><li>断线重连是一个相对复杂的功能，这需要验证断线玩家的身份以及断线时刻的进度。这部分可以分两步由浅入深实现，简单一点的第一步是断线的玩家重新进入游戏世界需要根据服务器提供的历史逻辑帧命令从头计算至当前游戏进度，因此会让玩家在进入游戏世界的时候等待比较长的时间，这个时间会随着游戏进度的深入而增加，体验不够人性化。第二种方法就是客户端每隔一段时间保存游戏世界快照到文件，让需要重新进入游戏的玩家就近载入一段快照并且从快照定义的逻辑帧往后计算至当前游戏进度，这个方法可以节省很多等待时间，体验也更好。</li><li>作弊问题在帧同步游戏中比较难避免，因为所有的数据以及运算都在客户端进行，理论上客户端里的数据可以被任意修改，甚至包括修改自己客户端里其他玩家的数据。导致游戏出现不同步现象。关于防作弊的思路，我想到的方法是，每个客户端可以每隔N帧发送给服务器一次当前游戏世界快照的校验码，服务器收到后判断是否一致性，这个方法虽然可以发现作弊现象但是具体是那个客户端作弊就不好判断了，只能通知所有客户端这件作弊事件，等待玩家做决定。</li></ul><h2 id="帧同步与ECS的结合"><a href="#帧同步与ECS的结合" class="headerlink" title="帧同步与ECS的结合"></a>帧同步与ECS的结合</h2><p>了解了帧同步开发过程中需要克服的难点，我们接下来就要考虑选用一种比较好的实现方式，或者说是一种开发框架。由于帧同步开发非常需要数据和表现分离，分离到什么程度呢？就是数据计算部分甚至可以放在一个单独的线程里。这样编写逻辑的好处还可以让服务器运行以达到快速复盘游戏的功能，能做到这种程度的分离我想只有ECS了。帧同步加上ECS绝对是完美搭档。</p><h3 id="ECS说明"><a href="#ECS说明" class="headerlink" title="ECS说明"></a>ECS说明</h3><p>首先要介绍一下ECS，ECS并非一种全新的技术，也不是Unity首先提出来的。这种名词的出现非常早，而近几年突然火爆，是因为暴雪的《守望先锋》。《守望先锋》的服务器和客户端框架完全基于ECS构建，在游戏机制、网络、渲染方面都有非常出色的表现。坦白地说ECS不像一种设计模式，我们以前用的设计模式都是在面向对象设计下谈论的，ECS都不是面向对象。Unity也有ECS，其实Unity本身的组件也是一种ECS，只不过还不够纯粹。ECS特别适合做Gameplay。关于ECS的变种也有很多，我这里也是稍微做了一些修改的ECS。</p><ul><li>ECS中的E代表Entity，不过也可以不需要，因为E表示的是一个唯一物体，完全可以用int来搞定。</li><li>C代表Component，这个Component和Unity里的Component不一样，这里的Component用来存储数据，这是一个没有具体方法的类型，主要表示属性，当然如果有一些简单的方法如ToString ，或者对自身数据的处理我想也可以。</li><li>S代表的是System，在这里只有方法，用于修改Component属性。</li><li>当然还可以加上R，R代表的是Renderer，Renderer只读取感兴趣的Component并负责显示正确的行为。E-C-S这三部分在线程里运行，R这部分在主线程运行，如此最大限度的提升性能。</li></ul><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p>这里推荐<a href="https://github.com/RevenantX/LiteNetLib">RevenantX/LiteNetLib</a>，这个库很强大并且用法很简洁，它提供了可靠UDP传输，这正是我想要的。<br>网络通信的数据协议可以选择的有很多，我这里使用的是自制二进制流协议，主要实现的功能是序列化与反序列化，结构体内的字段支持可选。<br>就像这个PtRoom结构：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Template auto generator:[AutoGenPt] v1.0</span></span><br><span class="line"><span class="comment">//Creation time:2021/1/28 16:43:48</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Net.Pt</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PtRoom</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> __tag__ &#123; <span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> uint RoomId&#123; <span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> Status&#123; <span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> uint MapId&#123; <span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> RoomOwnerUserId&#123; <span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> MaxPlayerCount&#123; <span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;PtRoomPlayer&gt; Players&#123; <span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> PtRoom <span class="title">SetRoomId</span>(<span class="params">uint <span class="keyword">value</span></span>)</span>&#123;RoomId=<span class="keyword">value</span>; __tag__|=<span class="number">1</span>; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PtRoom <span class="title">SetStatus</span>(<span class="params"><span class="built_in">byte</span> <span class="keyword">value</span></span>)</span>&#123;Status=<span class="keyword">value</span>; __tag__|=<span class="number">2</span>; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PtRoom <span class="title">SetMapId</span>(<span class="params">uint <span class="keyword">value</span></span>)</span>&#123;MapId=<span class="keyword">value</span>; __tag__|=<span class="number">4</span>; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PtRoom <span class="title">SetRoomOwnerUserId</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span>&#123;RoomOwnerUserId=<span class="keyword">value</span>; __tag__|=<span class="number">8</span>; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PtRoom <span class="title">SetMaxPlayerCount</span>(<span class="params"><span class="built_in">byte</span> <span class="keyword">value</span></span>)</span>&#123;MaxPlayerCount=<span class="keyword">value</span>; __tag__|=<span class="number">16</span>; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PtRoom <span class="title">SetPlayers</span>(<span class="params">List&lt;PtRoomPlayer&gt; <span class="keyword">value</span></span>)</span>&#123;Players=<span class="keyword">value</span>; __tag__|=<span class="number">32</span>; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasRoomId</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (__tag__&amp;<span class="number">1</span>)==<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasStatus</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (__tag__&amp;<span class="number">2</span>)==<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasMapId</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (__tag__&amp;<span class="number">4</span>)==<span class="number">4</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasRoomOwnerUserId</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (__tag__&amp;<span class="number">8</span>)==<span class="number">8</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasMaxPlayerCount</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (__tag__&amp;<span class="number">16</span>)==<span class="number">16</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasPlayers</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> (__tag__&amp;<span class="number">32</span>)==<span class="number">32</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Write</span>(<span class="params">PtRoom data</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span>(ByteBuffer buffer = <span class="keyword">new</span> ByteBuffer())</span><br><span class="line">        &#123;</span><br><span class="line">            buffer.WriteByte(data.__tag__);</span><br><span class="line">            <span class="keyword">if</span>(data.HasRoomId())buffer.WriteUInt32(data.RoomId);</span><br><span class="line">            <span class="keyword">if</span>(data.HasStatus())buffer.WriteByte(data.Status);</span><br><span class="line">            <span class="keyword">if</span>(data.HasMapId())buffer.WriteUInt32(data.MapId);</span><br><span class="line">            <span class="keyword">if</span>(data.HasRoomOwnerUserId())buffer.WriteString(data.RoomOwnerUserId);</span><br><span class="line">            <span class="keyword">if</span>(data.HasMaxPlayerCount())buffer.WriteByte(data.MaxPlayerCount);</span><br><span class="line">            <span class="keyword">if</span>(data.HasPlayers())buffer.WriteCollection(data.Players,(element)=&gt;PtRoomPlayer.Write(element));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> buffer.Getbuffer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PtRoom <span class="title">Read</span>(<span class="params"><span class="built_in">byte</span>[] bytes</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span>(ByteBuffer buffer = <span class="keyword">new</span> ByteBuffer(bytes))</span><br><span class="line">        &#123;</span><br><span class="line">            PtRoom data = <span class="keyword">new</span> PtRoom();</span><br><span class="line">            data.__tag__ = buffer.ReadByte();</span><br><span class="line">            <span class="keyword">if</span>(data.HasRoomId())data.RoomId = buffer.ReadUInt32();</span><br><span class="line">            <span class="keyword">if</span>(data.HasStatus())data.Status = buffer.ReadByte();</span><br><span class="line">            <span class="keyword">if</span>(data.HasMapId())data.MapId = buffer.ReadUInt32();</span><br><span class="line">            <span class="keyword">if</span>(data.HasRoomOwnerUserId())data.RoomOwnerUserId = buffer.ReadString();</span><br><span class="line">            <span class="keyword">if</span>(data.HasMaxPlayerCount())data.MaxPlayerCount = buffer.ReadByte();</span><br><span class="line">            <span class="keyword">if</span>(data.HasPlayers())data.Players = buffer.ReadCollection( (rBytes)=&gt;PtRoomPlayer.Read(rBytes) );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>下一篇我将更新如何用帧同步开发一个太空大战的游戏，就像Steam上的<a href="https://store.steampowered.com/app/761910/Worbital/">Worbital</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;帧同步与状态同步&quot;&gt;&lt;a href=&quot;#帧同步与状态同步&quot; class=&quot;headerlink&quot; title=&quot;帧同步与状态同步&quot;&gt;&lt;/a&gt;帧同步与状态同步&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;帧同步和状态同步都是一种能让多个客户端在相对同一时刻表现一致的方法，当然只有外观</summary>
      
    
    
    
    
    <category term="Game Develop" scheme="http://example.com/tags/Game-Develop/"/>
    
  </entry>
  
  <entry>
    <title>国战编辑器</title>
    <link href="http://example.com/2021/02/01/%E5%9B%BD%E6%88%98%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://example.com/2021/02/01/%E5%9B%BD%E6%88%98%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2021-02-01T07:11:23.000Z</published>
    <updated>2021-02-09T07:13:48.734Z</updated>
    
    <content type="html"><![CDATA[<p>经典的SLG游戏都离不开国战的玩法，尤其以三国类题材居多，我在几年前有幸参与了一款经典的三国类SLG游戏的开发，其中的国战玩法相当典型。包含这几点元素：</p><p>#1大地图（整个中国版图相当宏伟）；</p><p>#2城池数量庞大城与城之间包含复杂的连接组成庞大的城市网络；</p><p>#3路线的曲线各种各样；</p><p>#4丰富的地形设计；</p><p>#5单个城池的信息复杂多样；</p><p>那么该如何将这么多复杂的信息整合在一起呢，毕竟光200多个的城池详细信息要让策划录入配置表就已经是一件不可能完成的事情了，考虑到效率和人文关怀。我为策划同事们开发了一款国战大底图编辑器。这个编辑器现在可以在我的网盘中<a href="https://pan.baidu.com/s/1pzNFkzji9gr-Fuu4hDaQLA">下载</a>（979s）。</p><p><strong>我设计编辑器的主要功能还是便于策划和我们程序开发，因此可视化所见所得是必须的，当我们打开CountryMapEditor.exe的时候，界面是这样的：</strong></p><p><img src="/2021/02/01/%E5%9B%BD%E6%88%98%E7%BC%96%E8%BE%91%E5%99%A8/5c6bf414623d1.png" alt="国战编辑器"></p><p>这个界面中的大地图铺面了整个场景，缩略图窗口显示出当前的视窗位置：位于整个大地图的西北角，如此大的地图素材，需要在打开游戏或编辑器的时候对地图进行分块裁切，这部分工作在另外的工具中已经完成了，所有的地图分块保存着工具目录的asset目录下（这里把大地图切成了100块相同尺寸的数据块）待程序启动根据当前视窗大小和位置与数据分块中记录的数据比较进而选择加载适当的分块数据。这点也一些地图app类似。</p><p>地图数据的加载与释放同样都很重要，这与性能息息相关。在视窗远离某些分块时候做适当的数据释放，这点很重要。</p><p>接下来的这一步是编辑城池：</p><p><img src="/2021/02/01/%E5%9B%BD%E6%88%98%E7%BC%96%E8%BE%91%E5%99%A8/5c6bf19aecd8e.png" alt="国战编辑器"></p><p>我在这里已经编辑了一些城池，从上图我们可以看到城池与城池之间的红色贝塞尔曲线就是他们之间的道路，<strong>用两个点可以调整贝塞尔曲线的曲率，使得曲线与地面道路尽可能贴合，这样单条贝塞尔曲线的点集合M描述了城池A与城池B之间的路径长度或者说是权重，记为M｛A,B｝ = Value；Value值就是点与点之间的长度和，</strong>这个Value很重要，它将在迪杰斯特拉算法中充当权重的角色，因此这个值不光前端需要，后端也需要这个值。在实际游戏中某个城池会出现毁坏状态，此时经过这个城池的所有道路将处于失效状态。这个时候也可以通过修改权重达到效果。</p><p>我们编辑完成后可以点击Output按钮这样我们就把数据保存了下来；我们去找一下MapNode文件夹</p><p><img src="/2021/02/01/%E5%9B%BD%E6%88%98%E7%BC%96%E8%BE%91%E5%99%A8/5c6bf75e535e0.png" alt="国战编辑器"></p><p>如图所示，文件夹内有两个文件，其中xml文件简单明了</p><p><img src="/2021/02/01/%E5%9B%BD%E6%88%98%E7%BC%96%E8%BE%91%E5%99%A8/5c6bf7a255e20.png" alt="国战编辑器"></p><p>将所有的关系都已经列举了出来，这种配置文件信息后端很需要，另外一个二进制文件是前端用的，里面不止包含了xml中的信息还有一些其他敏感数据信息。</p><p>到这里这个国战编辑器就算完成了，这部分的工作使得策划可以更安心的处理游戏细节，而不必受困于生产工具。需要项目工程的可以联系我。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经典的SLG游戏都离不开国战的玩法，尤其以三国类题材居多，我在几年前有幸参与了一款经典的三国类SLG游戏的开发，其中的国战玩法相当典型。包含这几点元素：&lt;/p&gt;
&lt;p&gt;#1大地图（整个中国版图相当宏伟）；&lt;/p&gt;
&lt;p&gt;#2城池数量庞大城与城之间包含复杂的连接组成庞大的城市</summary>
      
    
    
    
    
    <category term="Game Editor" scheme="http://example.com/tags/Game-Editor/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/02/01/hello-world/"/>
    <id>http://example.com/2021/02/01/hello-world/</id>
    <published>2021-02-01T05:47:14.592Z</published>
    <updated>2021-02-01T05:47:14.592Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
